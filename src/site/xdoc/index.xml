<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (C) 2000 - 2023 Silverpeas

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    As a special exception to the terms and conditions of version 3.0 of
    the GPL, you may redistribute this Program in connection with Free/Libre
    Open Source Software ("FLOSS") applications as described in Silverpeas's
    FLOSS exception.  You should have received a copy of the text describing
    the FLOSS exception, and it is also available here:
    "https://www.silverpeas.org/legal/floss_exception.html"

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

-->
<document>
  <properties>
    <author>Miguel Moquillon</author>
    <title>Silverpeas Kernel Introduction</title>
  </properties>
  <head>
  </head>
  <body>
    <section name="Silverpeas Kernel">
      <p>
        Silverpeas Kernel is the technical foundation upon which are built all the components that made up a Silverpeas project.
        The Silverpeas Kernel serves as the technical foundation of Silverpeas Core which provides some implementations of the
        technical interfaces defined in the kernel.
        It defines both the commons objets and a bus in which objects communicate with each other through their interface
        without having to know or maintain a reference to their implementation. The bus has the following goal:
      </p>
      <ul>
        <li>Allowing to publish interface and the electives implementations;</li>
        <li>Managing the life-cycle of the published objects;</li>
        <li>Allowing the firing of events about some actions on business objects;</li>
        <li>Distributing the above events in a synchronous or asynchronous way on the observers of such events;</li>
        <li>Injecting or providing managed bean(s) satisfying an interface to the object requiring it.</li>
      </ul>
      <p>
        Beside the bus, a set of utility objects are defined for common tasks:
      </p>
      <ul>
        <li>Logging;</li>
        <li>SQL requesting;</li>
        <li>...</li>
      </ul>
    </section>
  </body>
</document>
